{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/schema.ts"],"names":[],"mappings":";AAAA,qBAAqB;AACrB,wBAAwB;;;AAExB,6BAAuB;AAEvB,sCAAsC;AACzB,QAAA,YAAY,GAAG,OAAC,CAAC,MAAM,CAAC;IACpC,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC1B,cAAc,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC/B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,sCAAsC,CAAC;IACpE,MAAM,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;CAClC,CAAC,CAAA;AAEW,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IACxC,0BAA0B,EAAE,OAAC,CAAC,MAAM,EAAE;IACtC,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE;IAC3B,aAAa,EAAE,OAAC,CAAC,MAAM,EAAE;IACzB,EAAE,EAAE,oBAAY;CAChB,CAAC,CAAA;AAEW,QAAA,mBAAmB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3C,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE;IAC3B,SAAS,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACzE,oBAAoB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;IAChD,oBAAoB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,WAAW,EAAE;IACpD,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;CACpB,CAAC,CAAA;AAEW,QAAA,mBAAmB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3C,YAAY,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrC,SAAS,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,2BAAmB,CAAC;CACpD,CAAC,CAAA;AAEW,QAAA,oBAAoB,GAAG,OAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA","sourcesContent":["// Bitfocus AS - 2024\n// Author: William Viker\n\nimport { z } from 'zod'\n\n// Define Zod schemas (same as before)\nexport const IPInfoSchema = z.object({\n\tipAddress: z.string().ip(),\n\tgatewayAddress: z.string().ip(),\n\tmask: z.string(),\n\tmacAddress: z.string().regex(/^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/i),\n\tmethod: z.enum(['dhcp', 'static']),\n})\n\nexport const DeviceInfoSchema = z.object({\n\tdeviceInternalTemperatureC: z.number(),\n\tname: z.string(),\n\tfirmwareVersion: z.string(),\n\tfirmwareBuild: z.string(),\n\tip: IPInfoSchema,\n})\n\nexport const BatteryStatusSchema = z.object({\n\tbatteryBayTempC: z.number(),\n\tslotState: z.enum(['charging', 'empty', 'not charging', 'error', 'done']),\n\tstateOfChargePercent: z.number().min(0).max(100),\n\ttimeRemainingSeconds: z.number().int().nonnegative(),\n\terrorMsg: z.string(),\n})\n\nexport const ChargerStatusSchema = z.object({\n\tdeviceStatus: z.enum(['ok', 'error']),\n\tbatteries: z.record(z.string(), BatteryStatusSchema),\n})\n\nexport const DeviceIdentifySchema = z.object({})\n"]}
{"version":3,"file":"dummy.test.js","sourceRoot":"","sources":["../../../src/tests/dummy.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Bitfocus AS - 2024\n// Author: William Viker\n\nimport { afterAll, beforeAll, describe, expect, test } from '@jest/globals'\nimport request from 'supertest'\nimport { KLVRDummyDevice } from '../dummy'\nimport type { Server } from 'node:http'\nimport { ChargerStatusSchema, DeviceIdentifySchema, DeviceInfoSchema } from '../schema'\n\nlet server: Server\n\nconst app = KLVRDummyDevice()\n\ndescribe('KLVR Dummy Device', () => {\n\tbeforeAll((done) => {\n\t\tserver = app.listen(8000, () => {\n\t\t\tdone()\n\t\t})\n\t})\n\n\tafterAll((done) => {\n\t\tif (server) {\n\t\t\tserver.close((err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.error('Error closing the server:', err)\n\t\t\t\t\treturn done(err)\n\t\t\t\t}\n\t\t\t\tdone()\n\t\t\t})\n\t\t}\n\t})\n\n\ttest('DeviceInfo: Schema', async () => {\n\t\tconst response = await request(app).get('/api/v1/device/info')\n\t\texpect(response.status).toBe(200)\n\t\tconst validationResult = DeviceInfoSchema.safeParse(response.body)\n\t\texpect(validationResult.success).toBe(true)\n\t})\n\n\ttest('ChargerStatus: Schema', async () => {\n\t\tconst response = await request(app).get('/api/v1/charger/status')\n\t\texpect(response.status).toBe(200)\n\t\tconst validationResult = ChargerStatusSchema.safeParse(response.body)\n\t\texpect(validationResult.success).toBe(true)\n\t})\n\n\ttest('DeviceIdentify: Schema', async () => {\n\t\tconst response = await request(app).post('/api/v1/device/identify').send({})\n\t\texpect(response.status).toBe(200)\n\t\tconst validationResult = DeviceIdentifySchema.safeParse(response.body)\n\t\texpect(validationResult.success).toBe(true)\n\t})\n\n\ttest('DeviceIdentify: Should crash on empty payload', async () => {\n\t\tconst response = await request(app).post('/api/v1/device/identify')\n\t\texpect(response.status).toBe(200)\n\t\tconst validationResult = DeviceIdentifySchema.safeParse(response.body)\n\t\texpect(validationResult.success).toBe(true)\n\t})\n})\n"]}
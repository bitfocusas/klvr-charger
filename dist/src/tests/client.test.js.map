{"version":3,"file":"client.test.js","sourceRoot":"","sources":["../../../src/tests/client.test.ts"],"names":[],"mappings":";AAAA,qBAAqB;AACrB,wBAAwB;;AAExB,2CAA2E;AAC3E,oCAA0C;AAE1C,sCAAiE;AACjE,sCAAuC;AAEvC,IAAI,MAAc,CAAA;AAElB,MAAM,GAAG,GAAG,IAAA,uBAAe,GAAE,CAAA;AAC7B,MAAM,MAAM,GAAG,IAAA,oBAAW,EAAC,WAAW,CAAC,CAAA;AAEvC,IAAA,kBAAQ,EAAC,qBAAqB,EAAE,GAAG,EAAE;IACpC,IAAA,mBAAS,EAAC,CAAC,IAAI,EAAE,EAAE;QAClB,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YAC9B,IAAI,EAAE,CAAA;QACP,CAAC,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAQ,EAAC,CAAC,IAAI,EAAE,EAAE;QACjB,IAAI,MAAM,EAAE,CAAC;YACZ,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACpB,IAAI,GAAG,EAAE,CAAC;oBACT,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAA;oBAC/C,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;gBACjB,CAAC;gBACD,IAAI,EAAE,CAAA;YACP,CAAC,CAAC,CAAA;QACH,CAAC;IACF,CAAC,CAAC,CAAA;IAEF,IAAA,cAAI,EAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAA;QAC1C,MAAM,gBAAgB,GAAG,yBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;QAC7D,IAAA,gBAAM,EAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAA,cAAI,EAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,aAAa,EAAE,CAAA;QAC7C,MAAM,gBAAgB,GAAG,4BAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;QAChE,IAAA,gBAAM,EAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAA,cAAI,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,cAAc,EAAE,CAAA;QAC9C,IAAA,gBAAM,EAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC5B,CAAC,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","sourcesContent":["// Bitfocus AS - 2024\n// Author: William Viker\n\nimport { afterAll, beforeAll, describe, expect, test } from '@jest/globals'\nimport { KLVRDummyDevice } from '../dummy'\nimport type { Server } from 'node:http'\nimport { ChargerStatusSchema, DeviceInfoSchema } from '../schema'\nimport { KLVRCharger } from '../client'\n\nlet server: Server\n\nconst app = KLVRDummyDevice()\nconst client = KLVRCharger('127.0.0.1')\n\ndescribe('KLVR Client Library', () => {\n\tbeforeAll((done) => {\n\t\tserver = app.listen(8000, () => {\n\t\t\tdone()\n\t\t})\n\t})\n\n\tafterAll((done) => {\n\t\tif (server) {\n\t\t\tserver.close((err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.error('Error closing the server:', err)\n\t\t\t\t\treturn done(err)\n\t\t\t\t}\n\t\t\t\tdone()\n\t\t\t})\n\t\t}\n\t})\n\n\ttest('DeviceInfo: Response & Schema', async () => {\n\t\tconst response = await client.deviceInfo()\n\t\tconst validationResult = DeviceInfoSchema.safeParse(response)\n\t\texpect(validationResult.success).toBe(true)\n\t})\n\n\ttest('ChargerStatus: Response & Schema', async () => {\n\t\tconst response = await client.chargerStatus()\n\t\tconst validationResult = ChargerStatusSchema.safeParse(response)\n\t\texpect(validationResult.success).toBe(true)\n\t})\n\n\ttest('DeviceIdentify: Response & Schema', async () => {\n\t\tconst response = await client.deviceIdentify()\n\t\texpect(response).toBe(true)\n\t})\n})\n"]}
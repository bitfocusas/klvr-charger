{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/client.ts"],"names":[],"mappings":";AAAA,qBAAqB;AACrB,wBAAwB;;;;;AAKxB,kCA4CC;AA/CD,kDAAyB;AAGzB,SAAgB,WAAW,CAAC,EAAU;IACrC,MAAM,GAAG,GAAG,eAAK,CAAC,MAAM,CAAC;QACxB,OAAO,EAAE,UAAU,EAAE,eAAe;KACpC,CAAC,CAAA;IAEF,IAAI,SAAS,GAAkB,IAAI,CAAA;IAEnC,OAAO;QACN,UAAU,EAAE,KAAK,IAAI,EAAE;YACtB,IAAI,CAAC;gBACJ,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,GAAG,CAAa,cAAc,CAAC,CAAA;gBACrD,OAAO,GAAG,CAAC,IAAI,CAAA;YAChB,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACZ,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACtB,CAAC;YACD,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,aAAa,EAAE,KAAK,IAAI,EAAE;YACzB,IAAI,CAAC;gBACJ,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,GAAG,CAAgB,iBAAiB,CAAC,CAAA;gBAC3D,OAAO,GAAG,CAAC,IAAI,CAAA;YAChB,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACZ,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACtB,CAAC;YACD,OAAO,IAAI,CAAA;QACZ,CAAC;QAED,cAAc,EAAE,KAAK,IAAI,EAAE;YAC1B,IAAI,CAAC;gBACJ,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,IAAI,CAAiB,kBAAkB,EAAE,EAAE,CAAC,CAAA;gBAClE,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;oBACxB,OAAO,IAAI,CAAA;gBACZ,CAAC;YACF,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACZ,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACtB,CAAC;YACD,OAAO,KAAK,CAAA;QACb,CAAC;QAED,YAAY,EAAE,GAAG,EAAE;YAClB,OAAO,SAAS,CAAA;QACjB,CAAC;KACD,CAAA;AACF,CAAC","sourcesContent":["// Bitfocus AS - 2024\n// Author: William Viker\n\nimport Axios from 'axios'\nimport type { ChargerStatus, DeviceIdentify, DeviceInfo } from './types'\n\nexport function KLVRCharger(ip: string) {\n\tconst api = Axios.create({\n\t\tbaseURL: `http://${ip}:8000/api/v1/`,\n\t})\n\n\tlet lastError: string | null = null\n\n\treturn {\n\t\tdeviceInfo: async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await api.get<DeviceInfo>('/device/info')\n\t\t\t\treturn res.data\n\t\t\t} catch (e) {\n\t\t\t\tlastError = String(e)\n\t\t\t}\n\t\t\treturn null\n\t\t},\n\n\t\tchargerStatus: async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await api.get<ChargerStatus>('/charger/status')\n\t\t\t\treturn res.data\n\t\t\t} catch (e) {\n\t\t\t\tlastError = String(e)\n\t\t\t}\n\t\t\treturn null\n\t\t},\n\n\t\tdeviceIdentify: async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await api.post<DeviceIdentify>('/device/identify', {})\n\t\t\t\tif (res.status === 200) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlastError = String(e)\n\t\t\t}\n\t\t\treturn false\n\t\t},\n\n\t\tgetLastError: () => {\n\t\t\treturn lastError\n\t\t},\n\t}\n}\n"]}